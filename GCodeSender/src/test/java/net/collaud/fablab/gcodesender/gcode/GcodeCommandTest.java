package net.collaud.fablab.gcodesender.gcode;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import org.junit.Before;
import org.junit.Test;
import static org.assertj.core.api.Assertions.*;

/**
 *
 * @author Gaetan Collaud
 */
public class GcodeCommandTest {

	private static final String GCODE = "%\n"
			+ "(Header)\n"
			+ "(Generated by gcodetools from Inkscape.)\n"
			+ "(Using default header. To add your own header create file \"header\" in the output dir.)\n"
			+ "M3\n"
			+ "(Header end.)\n"
			+ "G21\n"
			+ "\n"
			+ "(Start cutting path id: path4910)\n"
			+ "(Change tool to Default tool)\n"
			+ "\n"
			+ "M300S40\n"
			+ "G00 Z5.000000\n"
			+ "G00 X46.184174 Y273.541462\n"
			+ "\n"
			+ "G01 Z-0.125000 F100.000000(Penetrate)\n"
			+ "M300S40\n"
			+ "G02 X42.229964 Y266.519803 Z-0.125000 I-8.211437 J0.000001 F400.000000\n"
			+ "G02 X28.081118 Y262.565594 Z-0.125000 \n"
			+ "M300S0\n"
			+ "G02 X13.932272 Y266.519803 Z-0.125000 I-0.000000 J27.290618\n"
			+ "G02 X9.978062 Y273.541462 Z-0.125000 I4.257227 J7.021660\n"
			+ "G02 X13.932272 Y280.563121 Z-0.125000 \n"
			+ "G02 X28.081118 Y284.517330 Z-0.125000 \n"
			+ "G02 X35.329182 Y283.621115 Z-0.125000 \n"
			+ "G02 X40.881911 Y281.302573 Z-0.125000 I-4.920374 J-19.592363\n"
			+ "G02 X44.987638 Y277.413993 Z-0.125000 I-6.927936 J-11.426595\n"
			+ "G02 X46.184174 Y273.541462 Z-0.125000 I-5.668362 J-3.872531\n"
			+ "G01 X46.184174 Y273.541462 Z-0.125000\n"
			+ "G00 Z5.000000\n"
			+ "\n"
			+ "(End cutting path id: path4910)\n"
			+ "\n"
			+ "\n"
			+ "(Footer)\n"
			+ "M5\n"
			+ "G00 X0.000000 Y0.000000\n"
			+ "M2\n"
			+ "(Using default footer. To add your own footer create file \"footer\" in the output dir.)\n"
			+ "(end)\n"
			+ "%";

	private List<String> lines = new ArrayList<>();

	@Before
	public void setup() {
		lines = Arrays.stream(GCODE.split("\n"))
				.filter(l -> l.startsWith("M") || l.startsWith("G"))
				.map(l -> l.replaceAll("\\(.*\\)", ""))
				.collect(Collectors.toList());

	}

	@Test
	public void testParser() {
		lines.forEach(l -> {
			Optional<GcodeCommand> cmd = GcodeCommand.parse(l);
			cmd.ifPresent(c -> assertThat(c.toString().trim()).isEqualTo(l.trim()));
		});
	}

}
